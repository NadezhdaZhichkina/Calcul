import streamlit as st
import pandas as pd
from io import BytesIO
from docx import Document

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–∏–±—ã–ª–∏", layout="centered")
st.title("üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–∏–±—ã–ª–∏")

partners = {
    "–ü–∞—Ä—Ç–Ω—ë—Ä —Å –ù–î–°": {"nds": True},
    "–ü–∞—Ä—Ç–Ω—ë—Ä –±–µ–∑ –ù–î–°": {"nds": False},
}

partner_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:", list(partners.keys()))
partner_nds = partners[partner_name]["nds"]

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (Excel –∏–ª–∏ DOCX):", type=["xlsx", "xls", "docx"])

def parse_file(file):
    if file.name.endswith(".xlsx") or file.name.endswith(".xls"):
        df = pd.read_excel(file)
    elif file.name.endswith(".docx"):
        doc = Document(file)
        rows = []
        for table in doc.tables:
            for row in table.rows:
                cols = [cell.text.strip() for cell in row.cells]
                if len(cols) >= 2:
                    try:
                        cost = float(cols[1].replace(",", ".").replace(" ", ""))
                        rows.append([cols[0], cost])
                    except:
                        continue
        df = pd.DataFrame(rows, columns=["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–°—Ç–æ–∏–º–æ—Å—Ç—å"])
    else:
        df = pd.DataFrame()
    return df

def find_price_column(df):
    for col in df.columns:
        if isinstance(col, str) and any(x in col.lower() for x in ["—Å—Ç–æ–∏–º", "—Ü–µ–Ω–∞"]):
            return col
    return None

def filter_itogo(df):
    first_col = df.columns[0]
    return df[~df[first_col].astype(str).str.strip().str.lower().str.startswith("–∏—Ç–æ–≥–æ", na=False)]

def generate_docx(table_df, total):
    doc = Document()
    doc.add_heading('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞', 0)
    table = doc.add_table(rows=1, cols=2)
    table.autofit = True
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = '–£—Å–ª—É–≥–∞'
    hdr_cells[1].text = '–¶–µ–Ω–∞ —Å –ù–î–° (‚ÇΩ)'
    for i, row in table_df.iterrows():
        cells = table.add_row().cells
        cells[0].text = str(row['–£—Å–ª—É–≥–∞'])
        cells[1].text = f"{row['–¶–µ–Ω–∞ —Å –ù–î–°']:,.2f} ‚ÇΩ".replace(",", " ").replace(".", ",")
    doc.add_paragraph()
    doc.add_paragraph(f"{'–ò—Ç–æ–≥–æ —Å –ù–î–°: ' + f'{total:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}")
    byte_io = BytesIO()
    doc.save(byte_io)
    byte_io.seek(0)
    return byte_io


# ‚ûï –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—É–º–º—ã –ø–æ–¥—Ä—è–¥—á–∏–∫—É (–µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏)
st.markdown("### üìù –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏)")
manual_sum = st.number_input("–°—É–º–º–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫—É:", min_value=0.0, step=1000.0, format="%.2f", key="manual_sum")
manual_nds = False
if partner_nds:
    manual_nds = st.checkbox("–°—É–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –ù–î–° (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)", value=True, key="manual_nds_checkbox")
use_manual = False
if manual_sum > 0 and uploaded_file is None:
    use_manual = True
    total_partner_sum = manual_sum
    nds_included = manual_nds
    df_spec = pd.DataFrame({})


if uploaded_file:
    df_spec = parse_file(uploaded_file)
    if df_spec.empty:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
    else:
        st.subheader("üìÑ –°—á–∏—Ç–∞–Ω–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è:")
        price_col = find_price_column(df_spec)
        if not price_col:
            st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω–æ–π.")
        else:
            df_filtered = filter_itogo(df_spec)

            formatted_df = df_filtered.copy()
            formatted_df[price_col] = formatted_df[price_col].apply(lambda x: f"{x:,.2f}".replace(",", " ").replace(".", ","))
            st.dataframe(formatted_df)

            total_partner_sum = df_filtered[price_col].sum()
            first_col = df_spec.columns[0]
            st.markdown(f"**–°—É–º–º–∞ –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:** `{f'{total_partner_sum:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")

            st.markdown("### ‚ûï –†–∞—Å—á—ë—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏")

            if "client_sum" not in st.session_state:
                st.session_state.client_sum = 0.0
            if "desired_profit" not in st.session_state:
                st.session_state.desired_profit = 0.0

            def on_client_sum_change():
                st.session_state.desired_profit = 0.0

            st.number_input(
                "–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É (–≤–∫–ª—é—á–∞–µ—Ç –ù–î–°):",
                step=1000.0,
                key="client_sum",
                on_change=on_client_sum_change
            )

            st.number_input(
                "–ñ–µ–ª–∞–µ–º–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–æ–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç):",
                step=1000.0,
                key="desired_profit"
            )

            client_sum = st.session_state.client_sum
            desired_profit = st.session_state.desired_profit

            nds_included = partner_nds and st.checkbox("–°—É–º–º–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç –ù–î–°", value=True)

            
col1, col2 = st.columns(2)
with col1:
    calc_button = st.button("üîÅ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å", key="calc_button")
with col2:
    spec_button = st.button("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤ DOCX/Excel", key="spec_button")

proceed_to_calc = calc_button and (client_sum > 0 or desired_profit > 0) and (uploaded_file or use_manual)

if proceed_to_calc:
    st.markdown("### üìä –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏")
    st.markdown("### üìä –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏")
                client_nds = client_sum * 20 / 120
                client_net = client_sum - client_nds

                if partner_nds:
                    if nds_included:
                        nds_sub = total_partner_sum * 20 / 120
                        net_sub = total_partner_sum - nds_sub
                    else:
                        net_sub = total_partner_sum
                        nds_sub = net_sub * 0.20
                        total_partner_sum = net_sub + nds_sub

                    nds_loss = nds_sub * 0.75
                    direct_costs = net_sub + nds_loss
                    tax_base = client_net - direct_costs
                    tax = tax_base * 0.05
                    profit = tax_base - tax

                    st.markdown(f"- **–ù–î–° –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:** `{f'{nds_sub:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–µ—Ç—Ç–æ –ø–æ–¥—Ä—è–¥—á–∏–∫—É:** `{f'{net_sub:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–î–° –∫–ª–∏–µ–Ω—Ç–∞:** `{f'{client_nds:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–µ—Ç—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:** `{f'{client_net:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–£–±—ã—Ç–æ–∫ –ø–æ –ù–î–° (75%):** `{f'{nds_loss:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ü—Ä—è–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:** `{f'{direct_costs:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞:** `{f'{tax_base:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å (5%):** `{f'{tax:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.success(f"üí∞ **–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:** `{f'{profit:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                else:
                    tax_base = client_net - total_partner_sum
                    tax = tax_base * 0.05
                    profit = tax_base - tax

                    st.markdown(f"- **–ù–µ—Ç—Ç–æ –ø–æ–¥—Ä—è–¥—á–∏–∫—É (–±–µ–∑ –ù–î–°):** `{f'{total_partner_sum:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–î–° –∫–ª–∏–µ–Ω—Ç–∞:** `{f'{client_nds:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–µ—Ç—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:** `{f'{client_net:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞:** `{f'{tax_base:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.markdown(f"- **–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å (5%):** `{f'{tax:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")
                    st.success(f"üí∞ **–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:** `{f'{profit:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`")

            if spec_button:
                st.markdown("### üìë –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
                spec_df = df_filtered.copy()
                total_original = spec_df[price_col].sum()

                if client_sum <= 0 or total_original == 0:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—É—Å—Ç–∞—è.")
                else:
                    k = client_sum / total_original
                    spec_df["–¶–µ–Ω–∞ —Å –ù–î–°"] = spec_df[price_col] * k
                    spec_df["–¶–µ–Ω–∞ —Å –ù–î–°"] = spec_df["–¶–µ–Ω–∞ —Å –ù–î–°"].round(2)
                    spec_display = spec_df[[first_col, "–¶–µ–Ω–∞ —Å –ù–î–°"]].rename(columns={first_col: "–£—Å–ª—É–≥–∞"})

                    formatted_display = spec_display.copy()
                    formatted_display["–¶–µ–Ω–∞ —Å –ù–î–°"] = formatted_display["–¶–µ–Ω–∞ —Å –ù–î–°"].apply(lambda x: f"{x:,.2f}".replace(",", " ").replace(".", ","))

                    st.dataframe(formatted_display)
                    total_for_client = spec_display["–¶–µ–Ω–∞ —Å –ù–î–°"].sum()
                    st.markdown(f"üíº **–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (—Å –ù–î–°): `{f'{total_for_client:,.2f} ‚ÇΩ'.replace(',', ' ').replace('.', ',')}`**")

                    docx_file = generate_docx(spec_display, total_for_client)
                    st.download_button("üíæ –°–∫–∞—á–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (DOCX)", docx_file, file_name="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è_–¥–ª—è_–∫–ª–∏–µ–Ω—Ç–∞.docx")

                    excel_io = BytesIO()
                    with pd.ExcelWriter(excel_io, engine="openpyxl") as writer:
                        spec_display.to_excel(writer, index=False, sheet_name="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
                        worksheet = writer.sheets["–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"]
                        worksheet.cell(row=len(spec_display) + 2, column=1, value="–ò—Ç–æ–≥–æ:")
                        worksheet.cell(row=len(spec_display) + 2, column=2, value=total_for_client)
                    excel_io.seek(0)
                    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (Excel)", excel_io, file_name="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è_–¥–ª—è_–∫–ª–∏–µ–Ω—Ç–∞.xlsx")
